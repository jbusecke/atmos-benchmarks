#!/bin/bash
################################################################################
# Testing interpolation and extrapolation with CDO from model levels
# to pressure levels
origfile=4xdaily_inst.nc
flags="-O"
cp $origfile ${origfile%.*}_copy.nc
ncfile=${origfile%.*}_copy.nc
function ncdimlist() { \ncdump -h "$1" | sed -n '/dimensions:/,$p' | sed '/variables:/q' \
    | cut -d '=' -f 1 -s | xargs | tr ' ' '\n' | grep -v '[{}]' | sort; }

############################################################################
# 1) Pre-processing steps. CDO expects levels to be named mlev/ilev for
# middle/intermediate levs, so change dim names. Can't be done in CDO. Also
# get the interpolants: we choose these to be roughly ~"average" pressure of hybrid coords
#  * example of variable deletion: ncks -O -x -v bhalf $ncfile $ncfile
#  * why I can read-write same file: http://nco.sourceforge.net/nco.html#Temporary-Output-Files
#  * try zaxisdes to see if CDO detects the hybrid axis correctly
t=$(date +%s)
# First change the names to ECHAM conventions for CDO
# Behavior of commands can be weird; I tried them 50 times and sometimes get
# errors when trying to put them all together. Just run them separately, they are cheap.
if [[ " $(ncdimlist $ncfile | xargs) " =~ " pfull " ]]; then
  ncrename -d pfull,mlev $ncfile # dimensions
  ncrename -v pfull,mlev $ncfile # variables of same name
fi
if [[ " $(ncdimlist $ncfile | xargs) " =~ " phalf " ]]; then
  ncrename -d phalf,ilev $ncfile
  ncrename -v phalf,ilev $ncfile
fi
# Next output the coordinates into a separate file; NCL can't completely overwrite
# variable dimensions/name/etc., would require delete which it can't do
# Also can't use CDO delname because CDO cannot find variables that don't fit
# into its model of (x by y by z)/(x by y by z by t), e.g. hybrid coords
coordsfile=coords.nc
ncks -O -v hyai,hybi $ncfile $coordsfile # put coords here
ncks -O -x -v hyai,hybi $ncfile $ncfile # delete from original
# Get the pressure suitable for interpolation with a quick python script
# Should be fast since coordsfile is so teeny tiny
python > plevels.txt << EOF
import numpy as np
import netCDF4 as nc4
with nc4.Dataset("$coordsfile") as f:
  hyai = f['hyai'][:]
  hybi = f['hybi'][:]
psurf = 101325 # average surface pressure
phalf = hyai + hybi*psurf
pfull = (phalf[1:] + phalf[:-1])/2
#### testing
# Nextra = 5
# pfull = np.concatenate([pfull, pfull[-Nextra:] + (pfull[-1]-pfull[-Nextra-1])])
#### testing
# Print, or save into file
print(",".join("%.f" % i for i in pfull.flat)) # just print output we want
# plevels = np.savetxt("plevels.txt", pfull, fmt="%.f", delimiter='', newline=',')
EOF
if [ ! -r plevels.txt ]; then
  echo "ERROR: Failed reading hybrid coordinates."
  exit 4
fi
# Get a nice grid of coefficients for this coordinate system
# See: https://stackoverflow.com/q/15192847/4970632
# Was tricky to save the data as columns; anyway this generated a grid description
# Output "vct" stands for "vertical coordinate table"
python > vct.txt << EOF
import numpy as np
import netCDF4 as nc4
with nc4.Dataset("$coordsfile") as f:
  hyai = f['hyai'][:]
  hybi = f['hybi'][:]
# Print, or save into file
for i,(a,b) in enumerate(zip(hyai,hybi)):
  print("%02.f"%i, "%.10f"%a, "%.10f"%b)
# np.savetxt('vct.txt', np.column_stack((range(len(hyai)),hyai,hybi)), newline='\n', fmt='%.10f') # this was ugly
EOF
# And finally generate a z-axis description
# This can be fed into "setzaxis", which changes dimensions and does a whole
# bunch of stuff that makes ml2pl function work properly
python > zaxis.txt << EOF
import numpy as np
import netCDF4 as nc4
with nc4.Dataset("$coordsfile") as f:
  hyai = f['hyai'][:]
  hybi = f['hybi'][:]
# Print data and collect
print("zaxistype = hybrid")
print("size      = " + str(len(hyai)-1))
print("levels    = " + " ".join("%.f"%i for i in range(1,len(hyai)))) # e.g. 1 to 41-1=40
print("vctsize   = " + str(len(hyai)*2)) # number of stuff in table
print("vct       = " + " ".join("%.f"%i for i in hyai))
print("            " + " ".join("%.10f"%i for i in hybi))
# format is super weird but vct is just A vals in one row, B vals in other
EOF
echo "  * Time for pre-processing with NCO and python: $(($(date +%s) - $t))s."

############################################################################
# 2) Interpolate to approx half-pressure levels with CDO
# Get the half-levels using a simple python script and the module netCDF4; this
# module should be installed with netCDF4
# Some notes during the "learning" process:
#   * cdo will treat hyai and hybi as invisible; can only handle
#       simple netcdf files with simple grids; need to use ncks for this
#   * you also cannot use "ncks -v hyai,hybi coords.nc; cdo enlarge,<infile> coords.nc"
#       because CDO will not read coords.nc at all.
#   * use "cat plevels.txt | sed 's/,/ /g' | wc -w" to get level count
#
# Part 1: # MUST change standard_name attribute so CDO will detect surface
# pressure; this is CF convention name; and it's all we have to do!
#   * first command is slow because need to make copy with setzaxis; obviously not
#     ideal workflow but still probably faster than any NCL approach
#   * second command is fast because it's a 1-level variable
echo "Interpolating coordinates..."
tempfix=true
$tempfix && string="NEW" || string=""
$tempfix && tname=temp || tname=t
# cdo -setzaxis,zaxis.txt -delname,p $ncfile prep1.nc
cdo -setzaxis,zaxis.txt -delname,p -chname,t,$tname $ncfile prep1.nc
ncap2 -O -s 'zs=slp; zs(:,:,:)=0' prep1.nc prep1.nc
ncatted -O -a standard_name,slp,o,c,"surface_air_pressure" \
   -a standard_name,zs,o,c,"surface_geopotential" \
   -a long_name,zs,o,c,"surface geopotential" \
   -a units,zs,o,c,"m" prep1.nc
! $tempfix && ncatted -O -a standard_name,t,o,c,"air_temperature" prep1.nc
echo "  * Time for setting things up before interpolation: $(($(date +%s) - $t))s."
t=$(date +%s)

# Part 2: Interpolate onto the pressure-levels file created before
#   * will overwrite the old $ncfile with this new, interpolated one
#   * results here turned out weird in tropics-surface; identially weird when using
#     just prep1.nc (CDO detects geopotential in bottom layer)
export EXTRAPOLATE=1
cdo $flags ml2pl,$(cat plevels.txt) 'prep1.nc' ${origfile%.*}_interp$string${EXTRAPOLATE}.nc

# Part 3: Extra processing of the result so things are nice
# Includes some extra attributes, and change back to mb units
# Option A: Bounds with CDO
cdo $flags -genlevelbounds,ztop=101325,zbot=0 ${origfile%.*}_interp$string${EXTRAPOLATE}.nc prep2.nc
ncatted -O -a units,plev,o,c,"mb" prep2.nc
ncatted -O -a units,plev_bnds,o,c,"mb" prep2.nc
ncatted -O -a long_name,plev_bnds,o,c,"pressure bounds" prep2.nc
ncatted -O -a positive,plev_bnds,o,c,"down" prep2.nc
ncap2 -O -s "plev=plev/100; plev_bnds=plev_bnds/100" prep2.nc prep2.nc
cp prep2.nc ${origfile%.*}_interp${EXTRAPOLATE}.nc
# # Option B: Bounds with NCO
# Unfortunately fails even with latest version; previously could use 'ncap' with
# create_bounds and prevent segmentation fault, but that would also raise error
# cp ${origfile%.*}_interp${EXTRAPOLATE}.nc prep2.nc
# cat > genbounds.nco << EOF
# defdim("bnds",2);
# plev=plev/100;
# plev_bnds=create_bounds(plev,"bnds","plev_bnds");
# EOF
# ncap2 -O -S genbounds.nco prep2.nc prep2.nc
# ncap2 -O -s 'defdim("bnds",2); plev=plev/100; plev_bnds=create_bounds(plev,"bnds","plev_bnds")' prep2.nc prep2.nc
echo "  * Time for interpolating to pressure coordinates with CDO: $(($(date +%s) - $t))s."

# For testing purposes
# Difference
echo "Creating difference file..."
cdo sub -selname,t $origfile -selname,$tname ${origfile%.*}_interp$string${EXTRAPOLATE}.nc \
  ${origfile%.*}_diff$string${EXTRAPOLATE}.nc

